//! SeaORM Entity. Generated by sea-orm-codegen 0.7.0

use anchor_client::anchor_lang::prelude::Pubkey;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize, Serializer};
use serde::ser::SerializeStruct;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "cl_items"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Deserialize)]
pub struct Model {
    pub id: i32,
    pub tree: Vec<u8>,
    pub node_idx: i64,
    pub seq: i64,
    pub level: i64,
    pub hash: Vec<u8>,
}

impl Serialize for Model {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
        where
            S: Serializer,
    {
        let mut s = serializer.serialize_struct("Model", 3)?;
        println!("{:?}, {:?}", self, self.hash.as_slice().len());
        s.serialize_field("id", &self.id)?;
        s.serialize_field("tree", &Pubkey::new(self.tree.as_slice()).to_string())?;
        s.serialize_field("index", &self.node_idx)?;
        s.serialize_field("level", &self.level)?;
        s.serialize_field("seq", &self.seq)?;
        s.serialize_field("hash", &Pubkey::new(self.hash.as_slice()).to_string())?;
        s.end()
    }
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    Tree,
    NodeIdx,
    Seq,
    Level,
    Hash,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i32;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::Integer.def(),
            Self::Tree => ColumnType::Binary.def(),
            Self::NodeIdx => ColumnType::BigInteger.def(),
            Self::Seq => ColumnType::BigInteger.def(),
            Self::Level => ColumnType::BigInteger.def(),
            Self::Hash => ColumnType::Binary.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        panic!("No RelationDef")
    }
}

impl ActiveModelBehavior for ActiveModel {}
